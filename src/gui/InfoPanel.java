package gui;

import gui.logic.XGUI_Info_Parser;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.geom.AffineTransform;
import java.util.HashMap;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import service.domain.DataObject;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author kavan
 */
public class InfoPanel extends JPanel {

    /**
     * Creates new form InfoDesign
     */
    // Variables declaration - do not modify
    private JLabel titleLb;
    private JLabel plotLb;
    private JLabel rateInfoLb;
    private JLabel playLb;
    private JLabel typeLb;
    private JLabel genreLb;
    private JLabel directLb;
    private JLabel actorLb;
    private JLabel mpaaLb;
    private JLabel starLb;
    private JLabel posterLb;
    private JPanel plotPanel;
    private JPanel posterPanel;
    private JPanel bottomPanel;
    private JPanel animePane;
    private JPanel proc_panel;
    private JLabel processLb;
    private boolean proc_icon_b;
    private String inProcess_msg;

    // End of variables declaration
    public InfoPanel() {
        proc_icon_b = true;
        initComponents();
        inProcess_msg = "";


    }

    public void setInProcessPulse() {
        this.removeAll();
        initInProcess();
        this.revalidate();
        this.repaint();

    }

    public void setInProcessMessage(String msg) {
        this.inProcess_msg = msg;
    }

    public String getInProcessMessage() {
        return this.inProcess_msg;
    }

    public void setInfo(DataObject info, XGUI_Info_Parser parser) {
        this.removeAll();
        initCompsWithValues(parser.getValues(info));
        this.revalidate();
        this.repaint();

    }

    public void clearInfoPanel() {
        this.removeAll();
        this.revalidate();
        this.repaint();
    }

    private void initInProcess() {

        if (animePane == null || proc_panel == null) {
            animePane = new AnimePane();
            proc_panel = new JPanel();
            BoxLayout layout = new BoxLayout(proc_panel, BoxLayout.Y_AXIS);
            proc_panel.setLayout(layout);
            proc_panel.setMinimumSize(new Dimension(500, 500));
            proc_panel.add(Box.createRigidArea(new Dimension(600, 250)));
            proc_panel.add(animePane);


        }

        this.setLayout(new BorderLayout());
        this.add(proc_panel, BorderLayout.CENTER);
        this.setMinimumSize(new Dimension(600, 600));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        posterPanel = new JPanel();
        bottomPanel = new JPanel();
        plotPanel = new JPanel();

        titleLb = new JLabel();
        plotLb = new JLabel();
        genreLb = new JLabel();
        directLb = new JLabel();
        actorLb = new JLabel();
        typeLb = new JLabel();
        mpaaLb = new JLabel();

        starLb = new JLabel();
        rateInfoLb = new JLabel();
        playLb = new JLabel();
        posterLb = new JLabel();


        setPosterPanelLayout();
        setBottomPanelLayout();
        setInfoPanelLayout();

    }

    private void initCompsWithValues(HashMap<String, String> values) {


        posterPanel = new JPanel();
        bottomPanel = new JPanel();
        plotPanel = new JPanel();

        titleLb = new JLabel(values.get("title"));
        plotLb = new JLabel(values.get("plot"));
        genreLb = new JLabel(values.get("genre"));
        directLb = new JLabel(values.get("director"));
        actorLb = new JLabel(values.get("actors"));
        typeLb = new JLabel(values.get("type"));
        mpaaLb = getMpaaLabel(values.get("mpaa"));
        starLb = new JLabel("star");
        rateInfoLb = new JLabel(values.get("rateInfo"));
        playLb = new JLabel("play");
        if (values.get("poster").equalsIgnoreCase(new XGUI_Info_Parser().inDefaultHtmlTag("sad-face"))) {
            posterLb = getSadLabel();
        } else {
            posterLb = new JLabel(values.get("poster"));
        }
        setPlotPanelLayout();
        setPosterPanelLayout();
        setBottomPanelLayout();
        setInfoPanelLayout();
    }

    private JLabel getSadLabel() {
        JLabel lb = new JLabel();
        Icon icon = new ImageIcon(getClass().getResource("/img/sad-face2.png"));
        lb.setIcon(icon);
        lb.setMinimumSize(new Dimension(320, 320));
        return lb;
    }

    private JLabel getMpaaLabel(String mpaa) {
        JLabel lb = new JLabel();
        Icon icon = null;
        if (mpaa.equalsIgnoreCase(new XGUI_Info_Parser().inDefaultHtmlTag("pg13"))) {
            icon = new ImageIcon(getClass().getResource("/img/mpaa/mpaa_pg13_res.jpg"));
        }
        if (mpaa.equalsIgnoreCase(new XGUI_Info_Parser().inDefaultHtmlTag("pg"))) {
            icon = new ImageIcon(getClass().getResource("/img/mpaa/mpaa_pg_res.jpg"));
        }
        if (mpaa.equalsIgnoreCase(new XGUI_Info_Parser().inDefaultHtmlTag("r"))) {
            icon = new ImageIcon(getClass().getResource("/img/mpaa/mpaa_r_res.jpg"));
        }
        if (mpaa.equalsIgnoreCase(new XGUI_Info_Parser().inDefaultHtmlTag("g"))) {
            icon = new ImageIcon(getClass().getResource("/img/mpaa/mpaa_g_res.jpg"));
        }
        if (mpaa.equalsIgnoreCase(new XGUI_Info_Parser().inDefaultHtmlTag("nc17"))) {
            icon = new ImageIcon(getClass().getResource("/img/mpaa/mpaa_nc17_res.jpg"));
        }
        if (icon != null) {
            lb.setIcon(icon);
        }
//        lb.setMaximumSize(new Dimension(300, 116));
        return lb;
    }

    private void setInfoPanelLayout() {

        this.setLayout(new BorderLayout());
        this.add(posterPanel, BorderLayout.NORTH);
        this.add(plotPanel, BorderLayout.WEST);
        this.add(bottomPanel, BorderLayout.PAGE_END);
        this.setMinimumSize(new Dimension(600, 600));


    }

    private void setPlotPanelLayout() {
        plotPanel.setLayout(new BorderLayout());
        plotPanel.add(plotLb, BorderLayout.CENTER);
    }

    private void setPosterPanelLayout() {

        JPanel rPane = new JPanel();
        JPanel lPane = new JPanel();

        posterPanel.setLayout(new BorderLayout());
        rPane.setLayout(new BorderLayout());
        rPane.add(posterLb, BorderLayout.CENTER);

        lPane.setLayout(new BoxLayout(lPane, BoxLayout.Y_AXIS));
        lPane.add(Box.createRigidArea(new Dimension(0, 5)));
        lPane.add(titleLb);
        lPane.add(Box.createRigidArea(new Dimension(0, 5)));
        lPane.add(genreLb);
        lPane.add(Box.createRigidArea(new Dimension(0, 5)));
        lPane.add(directLb);
        lPane.add(Box.createRigidArea(new Dimension(0, 5)));
        lPane.add(actorLb);
        lPane.add(Box.createRigidArea(new Dimension(0, 5)));
        lPane.add(typeLb);;
        lPane.add(Box.createRigidArea(new Dimension(0, 5)));
        lPane.add(mpaaLb);
        lPane.add(Box.createRigidArea(new Dimension(0, 5)));


        posterPanel.add(rPane, BorderLayout.WEST);
        posterPanel.add(lPane, BorderLayout.CENTER);
    }

    private void setBottomPanelLayout() {
        JPanel ratingPanel = new JPanel();
        BoxLayout ratingLayout = new BoxLayout(ratingPanel, BoxLayout.PAGE_AXIS);
        ratingPanel.setLayout(ratingLayout);
        ratingPanel.add(rateInfoLb);
        ratingPanel.add(Box.createRigidArea(new Dimension(0, 5)));
        ratingPanel.add(starLb);

        JPanel toolPanel = new JPanel();
        BoxLayout toolLayout = new BoxLayout(toolPanel, BoxLayout.LINE_AXIS);
        toolPanel.setLayout(toolLayout);
        toolPanel.add(playLb);

        BoxLayout bottomLayout = new BoxLayout(bottomPanel, BoxLayout.LINE_AXIS);
        bottomPanel.setLayout(bottomLayout);
        bottomPanel.add(ratingPanel);
        bottomPanel.add(Box.createRigidArea(new Dimension(10, 0)));
        bottomPanel.add(toolPanel);

    }

    private int getInfoPanelWidth() {
        return this.getWidth();
    }

    private int getInfoPanelHeight() {
        return this.getHeight();
    }

    class AnimePane extends JPanel {

        int elements_amount, painted_element_width;
        int[] elements_x_pos;
        Class elements_class;
        ImageIcon forwardIcon, filmIcon, zoomIcon;

        AnimePane() {

            forwardIcon = new ImageIcon(this.getClass().getResource("/img/process/film_forward_128.png"));
            filmIcon = new ImageIcon(this.getClass().getResource("/img/process/film_128.png"));
            zoomIcon = new ImageIcon(this.getClass().getResource("/img/process/zoom.png"));
            painted_element_width = 128;
            this.setOpaque(false);
            elements_amount = 6;//amount of elements to be painted
            setElements(elements_amount);
            initElementsXpos();
            this.setDoubleBuffered(true);
        }

        private void setElements(int x) {
            boolean f = true;
            for (int i = 0; i < x; i++) {
                JLabel lb = new JLabel();
                if (f) {
                    lb.setIcon(forwardIcon);
                    f = false;
                } else {
                    lb.setIcon(filmIcon);
                    f = true;
                }
                this.add(lb);
            }

            this.elements_class = JLabel.class;
        }

        @Override
        public void update(Graphics g) {
            paintComponent(g);
        }

        @Override
        public void paintComponent(Graphics g) {
            int animePane_width, animePane_height;
            super.paintComponent(g);
            Graphics2D g2d = (Graphics2D) g;
            this.setVisible(true);
            this.setBorder(BorderFactory.createMatteBorder(2, 0, 0, 0, Color.BLACK));
            updateElementsLocations();
            animePane_width = painted_element_width * (elements_amount - 2);
            animePane_height = painted_element_width + 72;
            this.setPreferredSize(new Dimension(animePane_width, animePane_height));
            this.setMaximumSize(new Dimension(animePane_width, animePane_height));

            g.setFont(new Font("serif", Font.BOLD, 17));
            g.drawString(inProcess_msg, getMsgXPoint(animePane_width, inProcess_msg), 170);
            g2d.drawImage(zoomIcon.getImage(), (animePane_width / 2) - 100, 0, this);
        }

        private void updateElementsLocations() {
            int i = 0;
            for (Component c : this.getComponents()) {
                if (c.getClass() == elements_class) {
                    // the calue for elements_class must be setted in setElements method

                    if (c.getLocation().getX() > (this.getWidth() + c.getWidth())) {
                        int newX = -(c.getWidth());
                        elements_x_pos[i] = newX;

                    } else {
                        elements_x_pos[i] += 1;
                    }

                    painted_element_width = c.getWidth();
                    c.setLocation(elements_x_pos[i], 0);
                    i++;

                }
            }
        }

        /**
         * calculate and return x point for the incoming progress messages
         *
         * @param paneWidth width of the animePanel
         * @param msg progress message
         * @return x point of the progress message
         */
        private int getMsgXPoint(int paneWidth, String msg) {
            int msg_xpoint = (paneWidth / 2) - 20;
            if (msg.length() > "searching...".length()) {
                //Don't try to understand this it's not possible :)
                msg_xpoint = (paneWidth - ((msg.length() - "searching...".length()) * 15));
                msg_xpoint = msg_xpoint / 2;
                msg_xpoint -= 20;
            }
            return msg_xpoint;
        }

        private void initElementsXpos() {
            elements_x_pos = new int[this.getComponents().length];
            for (int i = 0; i < elements_x_pos.length; i++) {
                if (i == 0) {
                    elements_x_pos[i] = 0;
                } else {
                    elements_x_pos[i] = elements_x_pos[i - 1] + painted_element_width;
                }
            }
        }
    }
}
